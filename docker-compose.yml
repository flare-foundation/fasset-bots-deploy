x-templates:
  x-fasset-bot-template: &fasset-bot
    image: ghcr.io/flare-labs-ltd/fasset-bots:latest
    stdin_open: true
    tty: true
    depends_on:
      postgres:
        condition: service_healthy

services:
  postgres:
    profiles: [agent,liquidator,challenger,cli]
    image: postgres:15
    container_name: ${COMPOSE_PROJECT_NAME}-postgres
    environment:
      POSTGRES_DB: ${FASSET_DB_NAME}
      POSTGRES_USER: ${FASSET_DB_USER}
      POSTGRES_PORT: ${FASSET_DB_PORT}
      POSTGRES_PASSWORD: ${FASSET_DB_PASSWORD}
      DEBUG: "true"
    volumes:
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $FASSET_DB_USER -d ${FASSET_DB_NAME} -h 127.0.0.1"]
      timeout: 20s
      retries: 10
  app:
    <<: *fasset-bot
    profiles: [agent]
    container_name: ${COMPOSE_PROJECT_NAME}
    environment:
      FRONTEND_PASSWORD: ${FRONTEND_PASSWORD}
      ROOT_PATH: ${BACKEND_PATH:-}
      LOG_TARGET: ${LOG_TARGET:-}
      FASSET_BOT_CONFIG: "./config.json"
      FASSET_BOT_SECRETS: "./secrets.json"
    ports:
      - "$BACKEND_PORT:1234"
    volumes:
      - ./secrets.json:/usr/src/app/secrets.json
      - ./config.json:/usr/src/app/config.json
      - ./log/app:/usr/src/app/log/
    command: "./entry.sh run-bots"
    labels:
      logging: promtail
      logging_jobname: "${PROMTAIL_HOSTNAME:-anonymous}_fasset_agent"

  liquidator:
    <<: *fasset-bot
    profiles: [liquidator]
    container_name: ${COMPOSE_PROJECT_NAME}-liquidator
    volumes:
      - ./secrets.json:/usr/src/app/secrets.json
      - ./config.json:/usr/src/app/config.json
      - ./log/liquidator:/usr/src/app/log/
    environment:
      LOG_TARGET: ${LOG_TARGET}
      FASSET_BOT_CONFIG: "./config.json"
      FASSET_BOT_SECRETS: "./secrets.json"
    command: "./entry.sh run-liquidator"
    labels:
      logging: promtail
      logging_jobname: "${PROMTAIL_HOSTNAME:-anonymous}_fasset_liquidator"

  challenger:
    <<: *fasset-bot
    profiles: [challenger]
    container_name: ${COMPOSE_PROJECT_NAME}-challenger
    volumes:
      - ./secrets.json:/usr/src/app/secrets.json
      - ./config.json:/usr/src/app/config.json
      - ./log/challenger:/usr/src/app/log/
    environment:
      LOG_TARGET: ${LOG_TARGET}
      FASSET_BOT_CONFIG: "./config.json"
      FASSET_BOT_SECRETS: "./secrets.json"
    command: "./entry.sh run-challenger"
    labels:
      logging: promtail
      logging_jobname: "${PROMTAIL_HOSTNAME:-anonymous}_fasset_challenger"

  agent-bot:
    <<: *fasset-bot
    profiles: [cli]
    container_name: ${COMPOSE_PROJECT_NAME}-agent-bot
    volumes:
      - ./secrets.json:/usr/src/app/secrets.json
      - ./config.json:/usr/src/app/config.json
      - ./log/agent-bot:/usr/src/app/log/
    entrypoint: ["yarn", "agent-bot"]
    environment:
      FASSET_BOT_CONFIG: "./config.json"
      FASSET_BOT_SECRETS: "./secrets.json"

  user-bot:
    <<: *fasset-bot
    profiles: [cli]
    container_name: ${COMPOSE_PROJECT_NAME}-user-bot
    volumes:
      - ./secrets.json:/usr/src/app/secrets.json
      - ./config.json:/usr/src/app/config.json
      - ./log/user-bot:/usr/src/app/log/
    entrypoint: ["yarn", "user-bot"]
    environment:
      FASSET_USER_SECRETS: "./secrets.json"
      FASSET_USER_CONFIG: "./config.json"

  ui:
    profiles: [agent-ui]
    image: ghcr.io/flare-labs-ltd/fasset-agent-ui:latest
    container_name: ${COMPOSE_PROJECT_NAME}-ui
    environment:
      API_URL: ${FRONTEND_API_URL}
      WALLETCONNECT_PROJECT_ID: ${WALLETCONNECT_PROJECT_ID}
      FRONT_URL: ${FRONTEND_PATH:-}
      FRONTEND_URL: ${FRONTEND_PATH:-}
    ports:
      - "$FRONTEND_PORT:3000"
    command: "/bin/sh -c '(npm run build) && (npm run start)'"
    stdin_open: true
    tty: true

  promtail:
    image: grafana/promtail:latest
    container_name: ${COMPOSE_PROJECT_NAME}-promtail
    profiles: ["send-logs"]
    restart: unless-stopped
    environment:
      LOKI_URL: ${LOKI_URL:-}
      PROMTAIL_HTTP_PORT: ${PROMTAIL_HTTP_PORT:-'unix:///var/run/docker.sock'}
      PROMTAIL_POSITIONS_FILE: ${PROMTAIL_POSITIONS_FILE:-/tmp/positions.yaml}
      DOCKER_SOCKET: ${PROMTAIL_DOCKER_SOCKET:-}
      REFRESH_INTERVAL: ${PROMTAIL_REFRESH_INTERVAL:-5s}
      LOGGING_LABEL: ${PROMTAIL_LOGGING_LABEL:-promtail}
      HOSTNAME: ${PROMTAIL_HOSTNAME}
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
    command:
      - "-config.expand-env=true"
      - "-config.file=/etc/promtail/config.yml"

volumes:
  postgres-db: